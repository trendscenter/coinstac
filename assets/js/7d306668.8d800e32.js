"use strict";(self.webpackChunkcoinstac_docs=self.webpackChunkcoinstac_docs||[]).push([[398],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>f});var o=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)n=a[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var u=o.createContext({}),s=function(t){var e=o.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=s(t.components);return o.createElement(u.Provider,{value:e},t.children)},m="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,u=t.parentName,l=c(t,["components","mdxType","originalType","parentName"]),m=s(n),d=r,f=m["".concat(u,".").concat(d)]||m[d]||p[d]||a;return n?o.createElement(f,i(i({ref:e},l),{},{components:n})):o.createElement(f,i({ref:e},l))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var u in e)hasOwnProperty.call(e,u)&&(c[u]=e[u]);c.originalType=t,c[m]="string"==typeof t?t:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1931:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:2},i="Mounting and transforming data for computation on local machine/outer COINSTAC node",c={unversionedId:"computation-author/mount-and-transform",id:"computation-author/mount-and-transform",title:"Mounting and transforming data for computation on local machine/outer COINSTAC node",description:"When running computations on data that is stored the local machine, it is necessary to mount the relevant files into the computation container in a format that the computation can consume and that the data is configured for the particular pipeline it is a part of.",source:"@site/docs/computation-author/mount-and-transform.md",sourceDirName:"computation-author",slug:"/computation-author/mount-and-transform",permalink:"/coinstac/computation-author/mount-and-transform",draft:!1,editUrl:"https://github.com/trendscenter/coinstac/tree/master/coinstac-docs/docs/computation-author/mount-and-transform.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Coinstac Computation Development Guide",permalink:"/coinstac/computation-author/coinstac-development-guide"},next:{title:"Developer documentation",permalink:"/coinstac/category/developer-documentation"}},u={},s=[{value:"The COINSTAC CSV format",id:"the-coinstac-csv-format",level:2},{value:"directory mount",id:"directory-mount",level:2}],l={toc:s},m="wrapper";function p(t){let{components:e,...n}=t;return(0,r.kt)(m,(0,o.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mounting-and-transforming-data-for-computation-on-local-machineouter-coinstac-node"},"Mounting and transforming data for computation on local machine/outer COINSTAC node"),(0,r.kt)("p",null,"When running computations on data that is stored the local machine, it is necessary to mount the relevant files into the computation container in a format that the computation can consume and that the data is configured for the particular pipeline it is a part of."),(0,r.kt)("h2",{id:"the-coinstac-csv-format"},"The COINSTAC CSV format"),(0,r.kt)("p",null,"In the COINSTAC system, the preferred format for input data is a CSV file that follows a specific format.\nThe CSV file should contain a number of rows, with each row representing a subject. Each subject's row should include a file path to the relevant image file, as well as values for each of the tracked covariates. COINSTAC will consume this CSV and mount each subject's file into the input directory of the container. Additionally, users can use the mapping UI to normalize their column names to what is defined by the pipeline creator, and the files will be linked in the input directory with the normalized column names."),(0,r.kt)("h2",{id:"directory-mount"},"directory mount"),(0,r.kt)("p",null,"If you prefer to handle the data in your own way, there is also an option to mount a directory into the container without COINSTAC doing any transformation beforehand."))}p.isMDXComponent=!0}}]);